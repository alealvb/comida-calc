// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    accounts      Account[]
    sessions      Session[]
    products      Product[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Product {
    id                   String           @id @default(cuid())
    name                 String
    brand                String?
    description          String?
    image                String?
    price                Float?
    category             ProductCategory?
    portion              Float?
    portionUnit          PortionUnit?
    portionsPerContainer Float?

    carbs              Float?
    calories           Float?
    fiber              Float?
    sugar              Float?
    sugarAlcohol       Float?
    protein            Float?
    colesterol         Float?
    sodium             Float?
    fat                Float?
    saturatedFat       Float?
    polyunsaturatedFat Float?
    monounsaturatedFat Float?
    transFat           Float?

    vitaminA   Float?
    vitaminB1  Float?
    vitaminB2  Float?
    vitaminB3  Float?
    vitaminB6  Float?
    vitaminB12 Float?
    vitaminC   Float?
    vitaminD   Float?
    vitaminE   Float?
    vitaminK   Float?

    calcium         Float?
    iron            Float?
    potassium       Float?
    zinc            Float?
    copper          Float?
    caffeine        Float?
    folate          Float?
    magnesium       Float?
    manganese       Float?
    panthotenicAcid Float?
    phosphorus      Float?
    selenium        Float?
    alcohol         Float?
    water           Float?

    createdById String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    dishProduct DishProduct[]
    createdBy   User?         @relation(fields: [createdById], references: [id], onDelete: Cascade)

    @@map("products")
}

enum PortionUnit {
    GRAM
    KILOGRAM
    LITER
    MILLILITER
    UNIT
}

enum ProductCategory {
    LACTOSE
    VEGETABLE
    FRUIT
    STARCH
    PROTEIN
    FAT
}

model Dish {
    id           String        @id @default(cuid())
    name         String
    description  String?
    image        String?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    dishProducts DishProduct[]

    @@map("dishes")
}

model DishProduct {
    id        String       @id @default(cuid())
    dishId    String
    productId String
    quantity  Float?
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    unit      PortionUnit?

    dish    Dish    @relation(fields: [dishId], references: [id], onDelete: Cascade)
    product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@unique([dishId, productId])
    @@map("dish_products")
}
